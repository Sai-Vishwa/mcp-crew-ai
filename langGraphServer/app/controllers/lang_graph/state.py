


from typing import Any, Dict, List, Optional 
from pydantic import BaseModel , Field


class toolCallInfo(BaseModel):
    tool_name : str
    input : dict
    status : str
    message : Optional[str]
    data : Optional[Any]
    

class Workflow(BaseModel):
    step_number : int
    tool_name : str
    tool_description : str
    params_required: List[str]    
    
class ReasoningAgentResponse(BaseModel):
    is_new_workflow : bool
    workflow_id : int | None
    workflow_name : str
    workflow_description : str
    workflow_steps : List[Workflow]
    confidence_score : float
    reasoning : str
    status : str
    message : str
    additional_message_for_reasoning_agent : str


class State(BaseModel):
    user_input_id : int
    user_input : str
    user_session : str
    chat_session : int
    user_name : str
    is_new_chat : bool
    current_step : Workflow | None
    completed_tools : List[Workflow]
    current_tool_call_info : toolCallInfo | None
    completed_tool_calls_info : List[toolCallInfo]
    final_response : str
    is_memory_loaded : bool 
    is_relevant_inputs_loaded : bool
    status : str
    message : str
    relevant_workflows : Dict[str , ReasoningAgentResponse] | None
    reasoning_agent_response : str | ReasoningAgentResponse | dict | Any
    is_valid_response : int
    additional_message_for_reasoning_agent : str
    
class inputState(BaseModel):
    user_input : str
    user_session : str
    chat_session : int
    is_new_chat : bool
    message : str
    status : str
    
class flagState(BaseModel):
    message : str
    status : str
    
class loaderState(BaseModel):
    is_memory_loaded : bool 
    user_input_id : int
    user_input : str
    user_session : str
    chat_session : int
    user_name : str
    message : str
    status : str
    
class RelevantWorkFlowState(BaseModel) : 
    
    user_input : str
    workflow_generated : ReasoningAgentResponse
    
class ListOfRelevantWorkflowState(BaseModel):
    
    user_input : str
    relevant_workflows : List[RelevantWorkFlowState]
    status : str
    message : str
    is_relevant_inputs_loaded : bool
    additional_message_for_reasoning_agent : str
    chat_session : int
    
class TemporaryHolderForReasoningAgentOutcome(BaseModel) :
    reasoning_agent_response : dict | str
    status : str
    message : str
    
class Chat :
  chat_id : int
  user_message : str
  ai_message : str

class CustomMemory :
  user_session : str
  user_name : str
  summary : str
  history : List[Chat]
  

class SingleWorkflowStepFormat(BaseModel) :
     
    step_number : int # step number for order
    
    tool_name : str # name of the tool to call
    
    tool_desc : str # description of the tool to call 
    
    params_required : List[str] # parameters for the tool call
  
  
class ReasoningAgentResponseFormat(BaseModel) : # response format expected from the agent
    
    is_new_workflow : bool # to verify the workflow is new or not
    
    workflow_id : Optional[int] # if using a old workflow what's it's id
    
    workflow_name : str # a name for this new workflow 
    
    workflow_description : str # a short desc for this generated workflow
    
    workflow_steps : List[SingleWorkflowStepFormat] # steps to follow
    
    confidence_score : float # self evaluation rating by the agent from 0.0 to 1.0
    
    reasoning : str # reason for choosing this workflow  
  
class InputState(BaseModel) : # state to be passed as input
    
    user_input : str # input prompt 
    
    user_session : str # session from login
    
    is_new_chat : bool # True / False helps to set memory
    
    chat_session : Optional[int] # chat session -> not needed if a new chat
    
    user_input_id : int # initially set to -1 will be updated to the proper id on verifying the user
    
class FlagState(BaseModel) : # state which acts as a flag to check the status of execution of previous states
    
    status : str # to mark success / error
    
    message : str # corresponding error message
    
class SingleMessageFormat(BaseModel) : # format of a single message
    
    chat_id : int # same as user input id the id for the msg 
    
    user_message : str # the prompt given by the user
    
    ai_message : ReasoningAgentResponseFormat # the response format expected from the reasoning agent
    
class SingleRelevantWorkflowFormat(BaseModel) : # state to hold the relevant workflows
    
    chat_id : int # same as the user input id
    
    user_message : str # that relevant prompt from user
    
    ai_message : ReasoningAgentResponseFormat # workflow generated by the agent for it
    
class ReasoningAgentInputState(BaseModel) :  # this state holds the user chat history as memory and relevant workflows to pass to the reasoning agent as input
    
    user_input_id : int # this is the config id for unique identification 
    
    chat_session : int # the chat session whose memory is stored
    
    history_messages : List[SingleMessageFormat] # List of Messages from history
    
    summary : str # summary of the previous messages to reduce context window
    
    relevant_workflows : List[SingleRelevantWorkflowFormat] # List of relevant workflows
    